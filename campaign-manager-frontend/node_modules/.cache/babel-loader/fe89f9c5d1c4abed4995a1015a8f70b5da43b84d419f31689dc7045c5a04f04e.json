{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Karab\\\\OneDrive\\\\Documents\\\\ABWinfuture\\\\ab-testing-manager\\\\src\\\\components\\\\RunTest\\\\RunTest.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { TextField, Button, Typography, Select, MenuItem, InputLabel, FormControl } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RunTest = () => {\n  _s();\n  const [testNames, setTestNames] = useState([]);\n  const [testName, setTestName] = useState(\"\");\n  const [controlClicks, setControlClicks] = useState(0);\n  const [controlImpressions, setControlImpressions] = useState(0);\n  const [variantClicks, setVariantClicks] = useState(0);\n  const [variantImpressions, setVariantImpressions] = useState(0);\n  const [error, setError] = useState(\"\");\n  useEffect(() => {\n    fetchTestNames();\n  }, []);\n  const fetchTestNames = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/test_names');\n      setTestNames(response.data.test_names);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const handleSelectChange = event => {\n    setTestName(event.target.value);\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const payload = {\n      test_name: testName,\n      control_click: controlClicks,\n      control_impressions: controlImpressions,\n      variant_click: variantClicks,\n      variant_impressions: variantImpressions\n    };\n    try {\n      const response = await axios.post('http://localhost:5001/ab-test-metric-input', payload);\n      setError(\"\");\n    } catch (error) {\n      console.error(error);\n      setError(\"There was an error running the test\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(FormControl, {\n        required: true,\n        fullWidth: true,\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          children: \"Test Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          value: testName,\n          onChange: handleSelectChange,\n          children: testNames.map((name, index) => /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: name,\n            children: name\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(Typography, {\n        color: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Control Clicks\",\n        type: \"number\",\n        value: controlClicks,\n        onChange: e => setControlClicks(Number(e.target.value)),\n        required: true,\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Control Impressions\",\n        type: \"number\",\n        value: controlImpressions,\n        onChange: e => setControlImpressions(Number(e.target.value)),\n        required: true,\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Variant Clicks\",\n        type: \"number\",\n        value: variantClicks,\n        onChange: e => setVariantClicks(Number(e.target.value)),\n        required: true,\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Variant Impressions\",\n        type: \"number\",\n        value: variantImpressions,\n        onChange: e => setVariantImpressions(Number(e.target.value)),\n        required: true,\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        variant: \"contained\",\n        color: \"primary\",\n        children: \"Run Test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(RunTest, \"8QOHHH6PkWAHpiDSRVBbZYIiM5s=\");\n_c = RunTest;\nexport default RunTest;\nvar _c;\n$RefreshReg$(_c, \"RunTest\");","map":{"version":3,"names":["React","useEffect","useState","axios","TextField","Button","Typography","Select","MenuItem","InputLabel","FormControl","jsxDEV","_jsxDEV","RunTest","_s","testNames","setTestNames","testName","setTestName","controlClicks","setControlClicks","controlImpressions","setControlImpressions","variantClicks","setVariantClicks","variantImpressions","setVariantImpressions","error","setError","fetchTestNames","response","get","data","test_names","console","handleSelectChange","event","target","value","handleSubmit","preventDefault","payload","test_name","control_click","control_impressions","variant_click","variant_impressions","post","children","onSubmit","required","fullWidth","fileName","_jsxFileName","lineNumber","columnNumber","onChange","map","name","index","color","label","type","e","Number","variant","_c","$RefreshReg$"],"sources":["C:/Users/Karab/OneDrive/Documents/ABWinfuture/ab-testing-manager/src/components/RunTest/RunTest.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { TextField, Button, makeStyles, Typography, Select, MenuItem, InputLabel, FormControl } from '@material-ui/core';\r\n\r\nconst RunTest: React.FC = () => {\r\n  const [testNames, setTestNames] = useState<string[]>([]);\r\n  const [testName, setTestName] = useState(\"\");\r\n  const [controlClicks, setControlClicks] = useState(0);\r\n  const [controlImpressions, setControlImpressions] = useState(0);\r\n  const [variantClicks, setVariantClicks] = useState(0);\r\n  const [variantImpressions, setVariantImpressions] = useState(0);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    fetchTestNames();\r\n  }, []);\r\n\r\n  const fetchTestNames = async () => {\r\n    try {\r\n      const response = await axios.get('http://localhost:5000/test_names');\r\n      setTestNames(response.data.test_names);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const handleSelectChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    setTestName(event.target.value as string);\r\n  };\r\n\r\n  const handleSubmit = async (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n  \r\n    const payload = {\r\n      test_name: testName,\r\n      control_click: controlClicks,\r\n      control_impressions: controlImpressions,\r\n      variant_click: variantClicks,\r\n      variant_impressions: variantImpressions,\r\n    };\r\n    try {\r\n      const response = await axios.post('http://localhost:5001/ab-test-metric-input', payload);\r\n      setError(\"\");\r\n    } catch (error) {\r\n      console.error(error);\r\n      setError(\"There was an error running the test\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        <FormControl required fullWidth>\r\n          <InputLabel>Test Name</InputLabel>\r\n          <Select value={testName} onChange={handleSelectChange}>\r\n            {testNames.map((name, index) => (\r\n              <MenuItem value={name} key={index}>{name}</MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n\r\n        {error && <Typography color=\"error\">{error}</Typography>}\r\n\r\n        <TextField\r\n          label=\"Control Clicks\"\r\n          type=\"number\"\r\n          value={controlClicks}\r\n          onChange={e => setControlClicks(Number(e.target.value))}\r\n          required\r\n          fullWidth\r\n        />\r\n\r\n        <TextField\r\n          label=\"Control Impressions\"\r\n          type=\"number\"\r\n          value={controlImpressions}\r\n          onChange={e => setControlImpressions(Number(e.target.value))}\r\n          required\r\n          fullWidth\r\n        />\r\n\r\n        <TextField\r\n          label=\"Variant Clicks\"\r\n          type=\"number\"\r\n          value={variantClicks}\r\n          onChange={e => setVariantClicks(Number(e.target.value))}\r\n          required\r\n          fullWidth\r\n        />\r\n\r\n        <TextField\r\n          label=\"Variant Impressions\"\r\n          type=\"number\"\r\n          value={variantImpressions}\r\n          onChange={e => setVariantImpressions(Number(e.target.value))}\r\n          required\r\n          fullWidth\r\n        />\r\n\r\n        <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n          Run Test\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RunTest;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}