{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport ABTestService from '../../services/api';\nimport { styled } from '@mui/material/styles';\nimport { TextField } from \"@mui/material\";\nconst FormContainer = styled('form')({\n  '& .MuiTextField-root': {\n    margin: '8px',\n    width: '25ch'\n  }\n});\nconst LineInput = styled(TextField)({\n  '& .MuiInputBase-root': {\n    border: 'none',\n    borderBottom: '1px solid rgba(0, 0, 0, 0.42)'\n  }\n});\nconst CreateTest = _ref => {\n  _s();\n  let {\n    setTestId\n  } = _ref;\n  const [formData, setFormData] = useState({\n    experiment_name: '',\n    original_name: '',\n    original_xpath: '',\n    element_type: '',\n    variants: [{\n      name: '',\n      element: {\n        name: '',\n        xpath: ''\n      }\n    }]\n  });\n  const handleInputChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setFormData(prevData => ({\n      ...prevData,\n      [name]: value\n    }));\n  };\n  const handleVariantChange = (event, index) => {\n    const {\n      name,\n      value\n    } = event.target;\n    const updatedVariants = [...formData.variants];\n    updatedVariants[index] = {\n      ...updatedVariants[index],\n      element: {\n        ...updatedVariants[index].element,\n        [name]: value\n      }\n    };\n    setFormData(prevData => ({\n      ...prevData,\n      variants: updatedVariants\n    }));\n  };\n  const handleAddVariant = () => {\n    const newVariant = {\n      name: '',\n      element: {\n        name: '',\n        xpath: ''\n      }\n    };\n    setFormData(prevData => ({\n      ...prevData,\n      variants: [...prevData.variants, newVariant]\n    }));\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    try {\n      await ABTestService.createTest(formData);\n      setTestId(formData.experiment_name);\n      alert('Test created successfully');\n    } catch (error) {\n      console.error('Error creating test:', error);\n      alert('Failed to create test');\n    }\n  };\n\n  // Render code stays almost the same. Just map over variants and display the element field.\n};\n_s(CreateTest, \"keVsWmfCVqr0WxJmqZ1qnIK455s=\");\n_c = CreateTest;\nexport default CreateTest;\nvar _c;\n$RefreshReg$(_c, \"CreateTest\");","map":{"version":3,"names":["useState","ABTestService","styled","TextField","FormContainer","margin","width","LineInput","border","borderBottom","CreateTest","_ref","_s","setTestId","formData","setFormData","experiment_name","original_name","original_xpath","element_type","variants","name","element","xpath","handleInputChange","event","value","target","prevData","handleVariantChange","index","updatedVariants","handleAddVariant","newVariant","handleSubmit","preventDefault","createTest","alert","error","console","_c","$RefreshReg$"],"sources":["C:/Users/Karab/OneDrive/Documents/ABWinfuture/ab-testing-manager/src/components/CreateTest/CreateTest.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport ABTestService from '../../services/api';\r\nimport { styled } from '@mui/material/styles';\r\nimport { Button, TextField, Container, Box, Typography } from \"@mui/material\";\r\n\r\ninterface CreateTestProps {\r\n  setTestId: React.Dispatch<React.SetStateAction<string | null>>;\r\n}\r\n\r\nconst FormContainer = styled('form')({\r\n  '& .MuiTextField-root': {\r\n    margin: '8px',\r\n    width: '25ch',\r\n  },\r\n});\r\n\r\nconst LineInput = styled(TextField)({\r\n  '& .MuiInputBase-root': {\r\n    border: 'none',\r\n    borderBottom: '1px solid rgba(0, 0, 0, 0.42)',\r\n  },\r\n});\r\n\r\nconst CreateTest: React.FC<CreateTestProps> = ({ setTestId }) => {\r\n  const [formData, setFormData] = useState({\r\n    experiment_name: '',\r\n    original_name: '',\r\n    original_xpath: '',\r\n    element_type: '',\r\n    variants: [\r\n      {\r\n        name: '',\r\n        element: { name: '', xpath: '' }\r\n      }\r\n    ]\r\n  });\r\n\r\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = event.target;\r\n    setFormData((prevData) => ({\r\n      ...prevData,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleVariantChange = (event: React.ChangeEvent<HTMLInputElement>, index: number) => {\r\n    const { name, value } = event.target;\r\n    const updatedVariants = [...formData.variants];\r\n    updatedVariants[index] = {\r\n      ...updatedVariants[index],\r\n      element: { ...updatedVariants[index].element, [name]: value }\r\n    };\r\n    setFormData((prevData) => ({\r\n      ...prevData,\r\n      variants: updatedVariants\r\n    }));\r\n  };\r\n\r\n  const handleAddVariant = () => {\r\n    const newVariant = {\r\n      name: '',\r\n      element: { name: '', xpath: '' },\r\n    };\r\n    setFormData((prevData) => ({\r\n      ...prevData,\r\n      variants: [...prevData.variants, newVariant]\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    try {\r\n      await ABTestService.createTest(formData);\r\n      setTestId(formData.experiment_name);\r\n      alert('Test created successfully');\r\n    } catch (error) {\r\n      console.error('Error creating test:', error);\r\n      alert('Failed to create test');\r\n    }\r\n  };\r\n\r\n  // Render code stays almost the same. Just map over variants and display the element field.\r\n};\r\n\r\nexport default CreateTest;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}