{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Karab\\\\OneDrive\\\\Documents\\\\ABWinfuture\\\\ab-testing-manager\\\\src\\\\components\\\\TestResults\\\\TestResults.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useWebSocket } from '../../services/websocket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TestResults = () => {\n  _s();\n  const {\n    data\n  } = useWebSocket();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Test Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), data ? /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Test ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 15,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Variant ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Impressions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Conversions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Conversion Rate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: data.map((result, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: result.test_id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: result.variant_id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: result.impressions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: result.conversions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [(result.conversions / result.impressions * 100).toFixed(2), \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n_s(TestResults, \"Zn7msHwDloPt8DyuWD1cY7r3/tk=\", false, function () {\n  return [useWebSocket];\n});\n_c = TestResults;\nexport default TestResults;\nvar _c;\n$RefreshReg$(_c, \"TestResults\");","map":{"version":3,"names":["React","useWebSocket","jsxDEV","_jsxDEV","TestResults","_s","data","children","fileName","_jsxFileName","lineNumber","columnNumber","map","result","index","test_id","variant_id","impressions","conversions","toFixed","_c","$RefreshReg$"],"sources":["C:/Users/Karab/OneDrive/Documents/ABWinfuture/ab-testing-manager/src/components/TestResults/TestResults.tsx"],"sourcesContent":["import React from 'react';\r\nimport { useWebSocket } from '../../services/websocket';\r\n\r\nconst TestResults: React.FC = () => {\r\n  const { data } = useWebSocket();\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <h2>Test Results</h2>\r\n      {data ? (\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Test ID</th>\r\n              <th>Variant ID</th>\r\n              <th>Impressions</th>\r\n              <th>Conversions</th>\r\n              <th>Conversion Rate</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.map((result: any, index: number) => (\r\n              <tr key={index}>\r\n                <td>{result.test_id}</td>\r\n                <td>{result.variant_id}</td>\r\n                <td>{result.impressions}</td>\r\n                <td>{result.conversions}</td>\r\n                <td>{(result.conversions / result.impressions * 100).toFixed(2)}%</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      ) : (\r\n        <p>No data available.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TestResults;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}