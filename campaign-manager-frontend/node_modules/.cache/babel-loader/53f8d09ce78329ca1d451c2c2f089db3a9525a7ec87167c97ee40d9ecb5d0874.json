{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Karab\\\\OneDrive\\\\Documents\\\\ABWinfuture\\\\ab-testing-manager\\\\src\\\\components\\\\TestResults\\\\TestResults.tsx\",\n  _s = $RefreshSig$();\n// TestResults.tsx\n\nimport React, { useEffect, useState } from 'react';\nimport ABTestService from '../../services/api';\nimport './TestResults.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TestResults = () => {\n  _s();\n  const [responseData, setResponseData] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const data = await ABTestService.fetchData(123);\n        setResponseData(data);\n      } catch (error) {\n        // We already logged the error in the service\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"abtest-results\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"form-title\",\n      children: \"A/B Test Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), responseData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"results-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"results-card-title\",\n        children: \"Test Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Test ID:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 14\n        }, this), \" \", responseData.test_id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Sample Size:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 14\n        }, this), \" \", responseData.sample_size]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(TestResults, \"o6lnEzgCLrCVITSCv0+t3LgWYVU=\");\n_c = TestResults;\nexport default TestResults;\nvar _c;\n$RefreshReg$(_c, \"TestResults\");","map":{"version":3,"names":["React","useEffect","useState","ABTestService","jsxDEV","_jsxDEV","TestResults","_s","responseData","setResponseData","fetchData","data","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","test_id","sample_size","_c","$RefreshReg$"],"sources":["C:/Users/Karab/OneDrive/Documents/ABWinfuture/ab-testing-manager/src/components/TestResults/TestResults.tsx"],"sourcesContent":["// TestResults.tsx\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport ABTestService from '../../services/api';\r\nimport { ResponseData } from '../../services/types';\r\nimport './TestResults.css';\r\n\r\nconst TestResults: React.FC = () => {\r\n  const [responseData, setResponseData] = useState<ResponseData | null>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const data = await ABTestService.fetchData(123);\r\n        setResponseData(data);\r\n      } catch (error) {\r\n        // We already logged the error in the service\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"abtest-results\">\r\n      <h2 className=\"form-title\">A/B Test Results</h2>\r\n      {responseData ? (\r\n        <div className=\"results-card\">\r\n          <h3 className=\"results-card-title\">Test Details</h3>\r\n          <p><strong>Test ID:</strong> {responseData.test_id}</p>\r\n          <p><strong>Sample Size:</strong> {responseData.sample_size}</p>\r\n          {/* Add more paragraphs as needed for the new fields */}\r\n        </div>\r\n      ) : (\r\n        <p>No </p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TestResults;\r\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,aAAa,MAAM,oBAAoB;AAE9C,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,WAAqB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAsB,IAAI,CAAC;EAE3ED,SAAS,CAAC,MAAM;IACd,MAAMS,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,IAAI,GAAG,MAAMR,aAAa,CAACO,SAAS,CAAC,GAAG,CAAC;QAC/CD,eAAe,CAACE,IAAI,CAAC;MACvB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACd;MAAA;IAEJ,CAAC;IAEDF,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA;IAAKQ,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7BT,OAAA;MAAIQ,SAAS,EAAC,YAAY;MAAAC,QAAA,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC/CV,YAAY,gBACXH,OAAA;MAAKQ,SAAS,EAAC,cAAc;MAAAC,QAAA,gBAC3BT,OAAA;QAAIQ,SAAS,EAAC,oBAAoB;QAAAC,QAAA,EAAC;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpDb,OAAA;QAAAS,QAAA,gBAAGT,OAAA;UAAAS,QAAA,EAAQ;QAAQ;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACV,YAAY,CAACW,OAAO;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACvDb,OAAA;QAAAS,QAAA,gBAAGT,OAAA;UAAAS,QAAA,EAAQ;QAAY;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACV,YAAY,CAACY,WAAW;MAAA;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAE5D,CAAC,gBAENb,OAAA;MAAAS,QAAA,EAAG;IAAG;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACV;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACX,EAAA,CA/BID,WAAqB;AAAAe,EAAA,GAArBf,WAAqB;AAiC3B,eAAeA,WAAW;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}