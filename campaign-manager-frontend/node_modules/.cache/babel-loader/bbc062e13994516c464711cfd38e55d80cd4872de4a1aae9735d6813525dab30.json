{"ast":null,"code":"// ABTestService.ts\n\nconst ABTestService = {\n  async fetchData(testName) {\n    try {\n      const response = await fetch(`http://localhost:5002/calculate_test_results?test_name=${testName}`);\n      console.log(response);\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      throw error;\n    }\n  },\n  async createTest(formData) {\n    try {\n      const response = await fetch(`http://localhost:5001/create_experiment`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to create test');\n      }\n    } catch (error) {\n      console.error('Error creating test:', error);\n      throw error;\n    }\n  },\n  // create a method that will call the test results endpoint\n  async getTestResults(experiment_name) {\n    try {\n      const response = await fetch(`http://localhost:5002/calculate_test_results?test_name=${experiment_name}`);\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      throw error;\n    }\n  }\n};\nexport default ABTestService;","map":{"version":3,"names":["ABTestService","fetchData","testName","response","fetch","console","log","data","json","error","createTest","formData","method","headers","body","JSON","stringify","ok","Error","getTestResults","experiment_name"],"sources":["C:/Users/Karab/OneDrive/Documents/ABWinfuture/ab-testing-manager/src/services/api.ts"],"sourcesContent":["// ABTestService.ts\r\nimport { TestResultResponse, ABTestFormData } from './types';\r\n\r\nconst ABTestService = {\r\n  async fetchData(testName: string): Promise<TestResultResponse> {\r\n    try {\r\n      const response = await fetch(`http://localhost:5002/calculate_test_results?test_name=${testName}`);\r\n      console.log(response);\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async createTest(formData: ABTestFormData): Promise<void> {\r\n    try {\r\n      const response = await fetch(`http://localhost:5001/create_experiment`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(formData),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to create test');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error creating test:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n// create a method that will call the test results endpoint\r\nasync getTestResults(experiment_name: string): Promise<TestResultResponse> {\r\n  try {\r\n    const response = await fetch(`http://localhost:5002/calculate_test_results?test_name=${experiment_name}`);\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching data:', error);\r\n    throw error;\r\n  }\r\n},\r\n\r\n\r\n};\r\n\r\n\r\n\r\nexport default ABTestService;\r\n"],"mappings":"AAAA;;AAGA,MAAMA,aAAa,GAAG;EACpB,MAAMC,SAASA,CAACC,QAAgB,EAA+B;IAC7D,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,0DAAyDF,QAAS,EAAC,CAAC;MAClGG,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;MACrB,MAAMI,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI;IACb,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACb;EACF,CAAC;EAED,MAAMC,UAAUA,CAACC,QAAwB,EAAiB;IACxD,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAE,yCAAwC,EAAE;QACtEQ,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,QAAQ;MAC/B,CAAC,CAAC;MAEF,IAAI,CAACR,QAAQ,CAACc,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC1C;IACF,CAAC,CAAC,OAAOT,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACb;EACF,CAAC;EAEH;EACA,MAAMU,cAAcA,CAACC,eAAuB,EAA+B;IACzE,IAAI;MACF,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAAE,0DAAyDgB,eAAgB,EAAC,CAAC;MACzG,MAAMb,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI;IACb,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACb;EACF;AAGA,CAAC;AAID,eAAeT,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}