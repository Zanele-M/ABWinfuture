{"ast":null,"code":"const ABTestService = {\n  async getAllCampaignResults() {\n    try {\n      const response = await fetch(`http://localhost:5008/v1/get_results`);\n      const data = await response.json();\n      console.log('API Response:', data);\n      return data;\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      throw error;\n    }\n  },\n  async createCampaign(campaignData) {\n    try {\n      console.log(`Creating campaign: ${campaignData.campaignName}`);\n      const response = await fetch(`http://localhost:3000/api/v1/create_campaign`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(campaignData)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to create test');\n      }\n    } catch (error) {\n      console.error('Error creating test:', error);\n      throw error;\n    }\n  },\n  async pauseCampaign(campaignId) {\n    try {\n      const response = await fetch(`http://localhost:3000/api/v1/pauseCampaign`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          campaign_id: campaignId\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to pause campaign');\n      }\n    } catch (error) {\n      console.error('Error pausing campaign:', error);\n      throw error;\n    }\n  }\n};\nexport default ABTestService;","map":{"version":3,"names":["ABTestService","getAllCampaignResults","response","fetch","data","json","console","log","error","createCampaign","campaignData","campaignName","method","headers","body","JSON","stringify","ok","Error","pauseCampaign","campaignId","campaign_id"],"sources":["C:/Users/Karab/OneDrive/Documents/ABWinfuture/campaign-manager-frontend/src/services/api.ts"],"sourcesContent":["import { CampaignResultResponse, CampaignData } from './types';\r\n\r\nconst ABTestService = {\r\n  async getAllCampaignResults(): Promise<CampaignResultResponse> {\r\n    try {\r\n      const response = await fetch(`http://localhost:5008/v1/get_results`);\r\n      const data = await response.json();\r\n      console.log('API Response:', data); \r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async createCampaign(campaignData: CampaignData): Promise<void> {\r\n    try {\r\n      console.log(`Creating campaign: ${campaignData.campaignName}`);\r\n      const response = await fetch(`http://localhost:3000/api/v1/create_campaign`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(campaignData),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to create test');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error creating test:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async pauseCampaign(campaignId: number): Promise<void> {\r\n    try {\r\n      const response = await fetch(`http://localhost:3000/api/v1/pauseCampaign`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ campaign_id: campaignId }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to pause campaign');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error pausing campaign:', error);\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\nexport default ABTestService;\r\n"],"mappings":"AAEA,MAAMA,aAAa,GAAG;EACpB,MAAMC,qBAAqBA,CAAA,EAAoC;IAC7D,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,sCAAqC,CAAC;MACpE,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClCC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEH,IAAI,CAAC;MAClC,OAAOA,IAAI;IACb,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACb;EACF,CAAC;EAED,MAAMC,cAAcA,CAACC,YAA0B,EAAiB;IAC9D,IAAI;MACFJ,OAAO,CAACC,GAAG,CAAE,sBAAqBG,YAAY,CAACC,YAAa,EAAC,CAAC;MAC9D,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAE,8CAA6C,EAAE;QAC3ES,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,YAAY;MACnC,CAAC,CAAC;MAEF,IAAI,CAACR,QAAQ,CAACe,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC1C;IACF,CAAC,CAAC,OAAOV,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACb;EACF,CAAC;EAED,MAAMW,aAAaA,CAACC,UAAkB,EAAiB;IACrD,IAAI;MACF,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAAE,4CAA2C,EAAE;QACzES,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEK,WAAW,EAAED;QAAW,CAAC;MAClD,CAAC,CAAC;MAEF,IAAI,CAAClB,QAAQ,CAACe,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;MAC7C;IACF,CAAC,CAAC,OAAOV,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAMA,KAAK;IACb;EACF;AACF,CAAC;AAED,eAAeR,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}