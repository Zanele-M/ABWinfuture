{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Karab\\\\OneDrive\\\\Documents\\\\ABWinfuture\\\\ab-testing-manager\\\\src\\\\components\\\\TestResult\\\\TestResult.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Table, TableBody, TableCell, TableHead, TableRow, Button, Box, Typography } from '@mui/material';\nimport ABTestService from '../../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TestResult = () => {\n  _s();\n  const [resultData, setResultData] = useState([]);\n  const [experimentIds, setExperimentIds] = useState([]);\n  const fetchExperimentIds = async () => {\n    try {\n      const experimentIdsResponse = await ABTestService.getExperimentIds();\n      const experimentIds = experimentIdsResponse.map(id => parseInt(id));\n      setExperimentIds(experimentIds);\n    } catch (error) {\n      console.error('Error fetching experiment ids:', error);\n    }\n  };\n  const fetchResults = async () => {\n    if (experimentIds) {\n      const results = [];\n      for (const id of experimentIds) {\n        try {\n          const response = await ABTestService.getTestResults(id);\n          results.push(response);\n        } catch (error) {\n          console.error('Error fetching results for id ' + id + ':', error);\n        }\n      }\n      setResultData(results);\n    }\n  };\n  useEffect(() => {\n    fetchExperimentIds();\n  }, []);\n  useEffect(() => {\n    fetchResults();\n    const interval = setInterval(fetchResults, 15000);\n    return () => clearInterval(interval);\n  }, [experimentIds]);\n  const renderMetricsTable = () => {\n    if (!resultData) {\n      return null;\n    }\n    return resultData.map((result, index) => {\n      const {\n        metrics,\n        confidence_interval,\n        status,\n        variants,\n        winner,\n        date_created\n      } = result;\n      return /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          marginBottom: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h2\",\n          sx: {\n            marginBottom: '20px'\n          },\n          children: \"Test Results\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: [\"Date Created: \", date_created]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Table, {\n          sx: {\n            width: '100%',\n            marginBottom: '20px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(TableHead, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                sx: {\n                  padding: '10px',\n                  border: '1px solid #ccc',\n                  backgroundColor: '#f7f7f7',\n                  color: '#333',\n                  fontWeight: 'bold'\n                },\n                children: \"Variant\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"Impressions\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"Click Through Rate\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: variants.map(variant => /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                children: variant\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: metrics[variant].views\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: [metrics[variant].clickThroughRate.toFixed(2), \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 19\n              }, this)]\n            }, variant, true, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: [\"Status: \", status]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: [\"Confidence Interval: \", confidence_interval.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), winner && /*#__PURE__*/_jsxDEV(Typography, {\n          children: [\"Winner: \", winner && '🎈']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      padding: '20px'\n    },\n    children: [renderMetricsTable(), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      sx: {\n        marginTop: '10px'\n      },\n      onClick: fetchResults,\n      children: \"Refresh\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(TestResult, \"90UIyzLDUtS8oV3zp7NGrb2FLig=\");\n_c = TestResult;\nexport default TestResult;\nvar _c;\n$RefreshReg$(_c, \"TestResult\");","map":{"version":3,"names":["React","useEffect","useState","Table","TableBody","TableCell","TableHead","TableRow","Button","Box","Typography","ABTestService","jsxDEV","_jsxDEV","TestResult","_s","resultData","setResultData","experimentIds","setExperimentIds","fetchExperimentIds","experimentIdsResponse","getExperimentIds","map","id","parseInt","error","console","fetchResults","results","response","getTestResults","push","interval","setInterval","clearInterval","renderMetricsTable","result","index","metrics","confidence_interval","status","variants","winner","date_created","sx","marginBottom","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","width","padding","border","backgroundColor","color","fontWeight","views","clickThroughRate","toFixed","marginTop","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Karab/OneDrive/Documents/ABWinfuture/ab-testing-manager/src/components/TestResult/TestResult.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Table, TableBody, TableCell, TableHead, TableRow, Button, Box, Typography } from '@mui/material';\r\nimport ABTestService from '../../services/api';\r\nimport { TestResultResponse } from '../../services/types';\r\n\r\nconst TestResult: React.FC = () => {\r\n  const [resultData, setResultData] = useState<TestResultResponse[]>([]);\r\n  const [experimentIds, setExperimentIds] = useState<number[]>([]);\r\n\r\n  const fetchExperimentIds = async () => {\r\n    try {\r\n      const experimentIdsResponse = await ABTestService.getExperimentIds();\r\n      const experimentIds: number[] = experimentIdsResponse.map((id) => parseInt(id));\r\n\r\n      setExperimentIds(experimentIds);\r\n    } catch (error) {\r\n      console.error('Error fetching experiment ids:', error);\r\n    }\r\n  };\r\n\r\n  const fetchResults = async () => {\r\n    if (experimentIds) {\r\n      const results = [];\r\n      for (const id of experimentIds) {\r\n        try {\r\n          const response = await ABTestService.getTestResults(id);\r\n          results.push(response);\r\n        } catch (error) {\r\n          console.error('Error fetching results for id ' + id + ':', error);\r\n        }\r\n      }\r\n      setResultData(results);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchExperimentIds();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchResults();\r\n    const interval = setInterval(fetchResults, 15000);\r\n    return () => clearInterval(interval);\r\n  }, [experimentIds]);\r\n\r\n  const renderMetricsTable = () => {\r\n    if (!resultData) {\r\n      return null;\r\n    }\r\n\r\n    return resultData.map((result, index) => {\r\n      const { metrics, confidence_interval, status, variants, winner, date_created } = result;\r\n\r\n      return (\r\n        <Box key={index} sx={{ marginBottom: '20px' }}>\r\n          <Typography variant=\"h2\" sx={{ marginBottom: '20px' }}>Test Results</Typography>\r\n          <Typography>Date Created: {date_created}</Typography>\r\n          <Table sx={{ width: '100%', marginBottom: '20px' }}>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell sx={{ padding: '10px', border: '1px solid #ccc', backgroundColor: '#f7f7f7', color: '#333', fontWeight: 'bold' }}>Variant</TableCell>\r\n                <TableCell>Impressions</TableCell>\r\n                <TableCell>Click Through Rate</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {variants.map((variant) => (\r\n                <TableRow key={variant}>\r\n                  <TableCell>{variant}</TableCell>\r\n                  <TableCell>{metrics[variant].views}</TableCell>\r\n                  <TableCell>{metrics[variant].clickThroughRate.toFixed(2)}%</TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n          <Typography>Status: {status}</Typography>\r\n          <Typography>Confidence Interval: {confidence_interval.toFixed(2)}</Typography>\r\n          {winner && (\r\n            <Typography>\r\nWinner: {winner && '🎈'}\r\n            </Typography>\r\n          )}\r\n        </Box>\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ padding: '20px' }}>\r\n      {renderMetricsTable()}\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        sx={{ marginTop: '10px' }}\r\n        onClick={fetchResults}\r\n      >\r\n        Refresh\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default TestResult;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}