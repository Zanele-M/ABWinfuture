{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Karab\\\\OneDrive\\\\Documents\\\\ABWinfuture\\\\ab-testing-manager\\\\src\\\\components\\\\RunTest\\\\RunTest.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\nimport { TextField, Button, Typography } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RunTest = () => {\n  _s();\n  const [testNames, setTestNames] = useState([]);\n  const [testName, setTestName] = useState(\"\");\n  const [click, setClick] = useState(0);\n  const [impressions, setImpressions] = useState(0);\n  const [variant_segment, setVariantSegment] = useState(0);\n  const [control_x_path, setControlXPath] = useState(\"\");\n  const [variant_x_path, setVariantXPath] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  useEffect(() => {\n    fetchTestNames();\n  }, []);\n  const fetchTestNames = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/api/test-names');\n      setTestNames(response.data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    // Test name validation\n    const re = /^[a-zA-Z_]*$/;\n    if (!re.test(testName)) {\n      setError(\"Test name should only contain letters and underscores\");\n      return;\n    }\n    const test_name = uuidv4();\n    const payload = {\n      test_name,\n      testName,\n      click,\n      impressions,\n      variant_segment,\n      control_x_path,\n      variant_x_path\n    };\n    try {\n      const response = await axios.post('http://localhost:5001/ab-test-metric-input', payload);\n      console.log(response.data);\n      setError(\"\"); // clear error message on successful submission\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Test Name\",\n        value: testName,\n        onChange: e => setTestName(e.target.value),\n        required: true,\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(Typography, {\n        color: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Clicks\",\n        type: \"number\",\n        value: click,\n        onChange: e => setClick(Number(e.target.value)),\n        required: true,\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Impressions\",\n        type: \"number\",\n        value: impressions,\n        onChange: e => setImpressions(Number(e.target.value)),\n        required: true,\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Variant Segment\",\n        type: \"number\",\n        value: variant_segment,\n        onChange: e => setVariantSegment(Number(e.target.value)),\n        required: true,\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Control XPath\",\n        value: control_x_path,\n        onChange: e => setControlXPath(e.target.value),\n        required: true,\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Variant XPath\",\n        value: variant_x_path,\n        onChange: e => setVariantXPath(e.target.value),\n        required: true,\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        variant: \"contained\",\n        color: \"primary\",\n        children: \"Run Test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(RunTest, \"CndGmfvtd7XkFDynXGD3k0bwrpo=\");\n_c = RunTest;\nexport default RunTest;\nvar _c;\n$RefreshReg$(_c, \"RunTest\");","map":{"version":3,"names":["React","useEffect","useState","axios","v4","uuidv4","TextField","Button","Typography","jsxDEV","_jsxDEV","RunTest","_s","testNames","setTestNames","testName","setTestName","click","setClick","impressions","setImpressions","variant_segment","setVariantSegment","control_x_path","setControlXPath","variant_x_path","setVariantXPath","error","setError","fetchTestNames","response","get","data","console","handleSubmit","event","preventDefault","re","test","test_name","payload","post","log","children","onSubmit","label","value","onChange","e","target","required","fullWidth","fileName","_jsxFileName","lineNumber","columnNumber","color","type","Number","variant","_c","$RefreshReg$"],"sources":["C:/Users/Karab/OneDrive/Documents/ABWinfuture/ab-testing-manager/src/components/RunTest/RunTest.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { v4 as uuidv4 } from 'uuid'; \r\nimport { TextField, Button, makeStyles, Typography, Select, MenuItem, InputLabel, FormControl } from '@material-ui/core';\r\n\r\nconst RunTest: React.FC = () => {\r\n  const [testNames, setTestNames] = useState([]);\r\n  const [testName, setTestName] = useState(\"\");\r\n  const [click, setClick] = useState(0);\r\n  const [impressions, setImpressions] = useState(0);\r\n  const [variant_segment, setVariantSegment] = useState(0);\r\n  const [control_x_path, setControlXPath] = useState(\"\");\r\n  const [variant_x_path, setVariantXPath] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    fetchTestNames();\r\n  }, []);\r\n\r\n  const fetchTestNames = async () => {\r\n    try {\r\n      const response = await axios.get('http://localhost:5000/api/test-names');\r\n      setTestNames(response.data);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n\r\n    // Test name validation\r\n    const re = /^[a-zA-Z_]*$/;\r\n    if (!re.test(testName)) {\r\n      setError(\"Test name should only contain letters and underscores\");\r\n      return;\r\n    }\r\n\r\n    const test_name = uuidv4();\r\n    const payload = {\r\n      test_name, \r\n      testName, \r\n      click, \r\n      impressions, \r\n      variant_segment, \r\n      control_x_path, \r\n      variant_x_path\r\n    };\r\n    try {\r\n      const response = await axios.post('http://localhost:5001/ab-test-metric-input', payload);\r\n      console.log(response.data);\r\n      setError(\"\"); // clear error message on successful submission\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        <TextField\r\n          label=\"Test Name\"\r\n          value={testName}\r\n          onChange={e => setTestName(e.target.value)}\r\n          required\r\n          fullWidth\r\n        />\r\n        {error && <Typography color=\"error\">{error}</Typography>}\r\n        <TextField\r\n          label=\"Clicks\"\r\n          type=\"number\"\r\n          value={click}\r\n          onChange={e => setClick(Number(e.target.value))}\r\n          required\r\n          fullWidth\r\n        />\r\n        <TextField\r\n          label=\"Impressions\"\r\n          type=\"number\"\r\n          value={impressions}\r\n          onChange={e => setImpressions(Number(e.target.value))}\r\n          required\r\n          fullWidth\r\n        />\r\n        <TextField\r\n          label=\"Variant Segment\"\r\n          type=\"number\"\r\n          value={variant_segment}\r\n          onChange={e => setVariantSegment(Number(e.target.value))}\r\n          required\r\n          fullWidth\r\n        />\r\n        <TextField\r\n          label=\"Control XPath\"\r\n          value={control_x_path}\r\n          onChange={e => setControlXPath(e.target.value)}\r\n          required\r\n          fullWidth\r\n        />\r\n        <TextField\r\n          label=\"Variant XPath\"\r\n          value={variant_x_path}\r\n          onChange={e => setVariantXPath(e.target.value)}\r\n          required\r\n          fullWidth\r\n        />\r\n        <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n          Run Test\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RunTest;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}