{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Karab\\\\OneDrive\\\\Documents\\\\ABWinfuture\\\\ab-testing-manager\\\\src\\\\components\\\\RunTest\\\\RunTest.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\nimport { TextField, Button, Typography } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RunTest = () => {\n  _s();\n  const [testName, setTestName] = useState(\"\");\n  const [click, setClick] = useState(0);\n  const [impressions, setImpressions] = useState(0);\n  const [variant_segment, setVariantSegment] = useState(0);\n  const [control_x_path, setControlXPath] = useState(\"\");\n  const [variant_x_path, setVariantXPath] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    // Test name validation\n    const re = /^[a-zA-Z_]*$/;\n    if (!re.test(testName)) {\n      setError(\"Test name should only contain letters and underscores\");\n      return;\n    }\n    const test_id = uuidv4();\n    const payload = {\n      test_id,\n      testName,\n      click,\n      impressions,\n      variant_segment,\n      control_x_path,\n      variant_x_path\n    };\n    try {\n      const response = await axios.post('http://localhost:5001/ab-test-metric-input', payload);\n      console.log(response.data);\n      setError(\"\"); // clear error message on successful submission\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Test Name\",\n        value: testName,\n        onChange: e => setTestName(e.target.value),\n        required: true,\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(Typography, {\n        color: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Clicks\",\n        type: \"number\",\n        value: click,\n        onChange: e => setClick(Number(e.target.value)),\n        required: true,\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Impressions\",\n        type: \"number\",\n        value: impressions,\n        onChange: e => setImpressions(Number(e.target.value)),\n        required: true,\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Variant Segment\",\n        type: \"number\",\n        value: variant_segment,\n        onChange: e => setVariantSegment(Number(e.target.value)),\n        required: true,\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Control XPath\",\n        value: control_x_path,\n        onChange: e => setControlXPath(e.target.value),\n        required: true,\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Variant XPath\",\n        value: variant_x_path,\n        onChange: e => setVariantXPath(e.target.value),\n        required: true,\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        variant: \"contained\",\n        color: \"primary\",\n        children: \"Run Test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(RunTest, \"nWN9vWJtAjZRaVD7tldaOv3LkJ0=\");\n_c = RunTest;\nexport default RunTest;\nvar _c;\n$RefreshReg$(_c, \"RunTest\");","map":{"version":3,"names":["React","useState","axios","v4","uuidv4","TextField","Button","Typography","jsxDEV","_jsxDEV","RunTest","_s","testName","setTestName","click","setClick","impressions","setImpressions","variant_segment","setVariantSegment","control_x_path","setControlXPath","variant_x_path","setVariantXPath","error","setError","handleSubmit","event","preventDefault","re","test","test_id","payload","response","post","console","log","data","children","onSubmit","label","value","onChange","e","target","required","fullWidth","fileName","_jsxFileName","lineNumber","columnNumber","color","type","Number","variant","_c","$RefreshReg$"],"sources":["C:/Users/Karab/OneDrive/Documents/ABWinfuture/ab-testing-manager/src/components/RunTest/RunTest.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { v4 as uuidv4 } from 'uuid'; \r\nimport { TextField, Button, makeStyles, Typography } from '@material-ui/core';\r\n\r\nconst RunTest: React.FC = () => {\r\n  const [testName, setTestName] = useState(\"\");\r\n  const [click, setClick] = useState(0);\r\n  const [impressions, setImpressions] = useState(0);\r\n  const [variant_segment, setVariantSegment] = useState(0);\r\n  const [control_x_path, setControlXPath] = useState(\"\");\r\n  const [variant_x_path, setVariantXPath] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const handleSubmit = async (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n\r\n    // Test name validation\r\n    const re = /^[a-zA-Z_]*$/;\r\n    if (!re.test(testName)) {\r\n      setError(\"Test name should only contain letters and underscores\");\r\n      return;\r\n    }\r\n\r\n    const test_id = uuidv4();\r\n    const payload = {\r\n      test_id, \r\n      testName, \r\n      click, \r\n      impressions, \r\n      variant_segment, \r\n      control_x_path, \r\n      variant_x_path\r\n    };\r\n    try {\r\n      const response = await axios.post('http://localhost:5001/ab-test-metric-input', payload);\r\n      console.log(response.data);\r\n      setError(\"\"); // clear error message on successful submission\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        <TextField\r\n          label=\"Test Name\"\r\n          value={testName}\r\n          onChange={e => setTestName(e.target.value)}\r\n          required\r\n          fullWidth\r\n        />\r\n        {error && <Typography color=\"error\">{error}</Typography>}\r\n        <TextField\r\n          label=\"Clicks\"\r\n          type=\"number\"\r\n          value={click}\r\n          onChange={e => setClick(Number(e.target.value))}\r\n          required\r\n          fullWidth\r\n        />\r\n        <TextField\r\n          label=\"Impressions\"\r\n          type=\"number\"\r\n          value={impressions}\r\n          onChange={e => setImpressions(Number(e.target.value))}\r\n          required\r\n          fullWidth\r\n        />\r\n        <TextField\r\n          label=\"Variant Segment\"\r\n          type=\"number\"\r\n          value={variant_segment}\r\n          onChange={e => setVariantSegment(Number(e.target.value))}\r\n          required\r\n          fullWidth\r\n        />\r\n        <TextField\r\n          label=\"Control XPath\"\r\n          value={control_x_path}\r\n          onChange={e => setControlXPath(e.target.value)}\r\n          required\r\n          fullWidth\r\n        />\r\n        <TextField\r\n          label=\"Variant XPath\"\r\n          value={variant_x_path}\r\n          onChange={e => setVariantXPath(e.target.value)}\r\n          required\r\n          fullWidth\r\n        />\r\n        <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n          Run Test\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RunTest;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}