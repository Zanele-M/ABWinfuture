{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Karab\\\\OneDrive\\\\Documents\\\\ABWinfuture\\\\ab-testing-manager\\\\src\\\\components\\\\TestResult\\\\TestResult.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Table, TableBody, TableCell, TableHead, TableRow } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TestResults = _ref => {\n  _s();\n  let {\n    metrics,\n    confidenceInterval,\n    status,\n    variants,\n    winner,\n    dateCreated\n  } = _ref;\n  const useStyles = makeStyles(theme => ({\n    testResults: {\n      padding: '20px'\n    },\n    heading: {\n      marginBottom: '20px'\n    },\n    table: {\n      width: '100%',\n      borderCollapse: 'collapse',\n      marginBottom: '20px'\n    },\n    tableHeaderCell: {\n      padding: '10px',\n      border: '1px solid #ccc',\n      backgroundColor: '#f7f7f7',\n      color: '#333',\n      fontWeight: 'bold'\n    },\n    tableCell: {\n      padding: '10px',\n      border: '1px solid #ccc',\n      textAlign: 'center'\n    },\n    winnerCell: {\n      fontWeight: 'bold'\n    },\n    crownIcon: {\n      display: 'inline-block',\n      width: '12px',\n      height: '12px',\n      marginRight: '5px',\n      backgroundImage: 'url(crown-icon.png)',\n      backgroundSize: 'cover',\n      verticalAlign: 'middle'\n    }\n  }));\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.testResults,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: classes.heading,\n      children: \"AB Test Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Experiment Name: \", variants.length > 0 ? variants[0] : '']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Date Created: \", dateCreated]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      className: classes.table,\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            className: classes.tableHeaderCell,\n            children: \"Variants\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            className: classes.tableHeaderCell,\n            children: \"Impressions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            className: classes.tableHeaderCell,\n            children: \"Click Through Rate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: variants.map((variant, index) => {\n          var _metrics$variant, _metrics$variant2;\n          return /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              className: classes.tableCell,\n              children: variant\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              className: classes.tableCell,\n              children: (_metrics$variant = metrics[variant]) === null || _metrics$variant === void 0 ? void 0 : _metrics$variant.views\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              className: classes.tableCell,\n              children: (_metrics$variant2 = metrics[variant]) === null || _metrics$variant2 === void 0 ? void 0 : _metrics$variant2.clickThroughRate.toFixed(2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 15\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Status: \", status]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Confidence Interval: \", confidenceInterval.toFixed(2), \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), winner && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Winner: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: classes.crownIcon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 19\n      }, this), \" \", winner]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(TestResults, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", true);\n_c = TestResults;\nexport default TestResults;\nvar _c;\n$RefreshReg$(_c, \"TestResults\");","map":{"version":3,"names":["React","makeStyles","Table","TableBody","TableCell","TableHead","TableRow","jsxDEV","_jsxDEV","TestResults","_ref","_s","metrics","confidenceInterval","status","variants","winner","dateCreated","useStyles","theme","testResults","padding","heading","marginBottom","table","width","borderCollapse","tableHeaderCell","border","backgroundColor","color","fontWeight","tableCell","textAlign","winnerCell","crownIcon","display","height","marginRight","backgroundImage","backgroundSize","verticalAlign","classes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","variant","index","_metrics$variant","_metrics$variant2","views","clickThroughRate","toFixed","_c","$RefreshReg$"],"sources":["C:/Users/Karab/OneDrive/Documents/ABWinfuture/ab-testing-manager/src/components/TestResult/TestResult.tsx"],"sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Table, TableBody, TableCell, TableHead, TableRow } from '@material-ui/core';\r\n\r\ninterface TestResultsProps {\r\n  metrics: {\r\n    [key: string]: {\r\n      views: number;\r\n      clickThroughRate: number;\r\n    };\r\n  };\r\n  confidenceInterval: number;\r\n  status: string;\r\n  variants: string[];\r\n  winner: string | null;\r\n  dateCreated: string;\r\n}\r\n\r\nconst TestResults: React.FC<TestResultsProps> = ({\r\n  metrics,\r\n  confidenceInterval,\r\n  status,\r\n  variants,\r\n  winner,\r\n  dateCreated,\r\n}) => {\r\n  const useStyles = makeStyles((theme) => ({\r\n    testResults: {\r\n      padding: '20px',\r\n    },\r\n    heading: {\r\n      marginBottom: '20px',\r\n    },\r\n    table: {\r\n      width: '100%',\r\n      borderCollapse: 'collapse',\r\n      marginBottom: '20px',\r\n    },\r\n    tableHeaderCell: {\r\n      padding: '10px',\r\n      border: '1px solid #ccc',\r\n      backgroundColor: '#f7f7f7',\r\n      color: '#333',\r\n      fontWeight: 'bold',\r\n    },\r\n    tableCell: {\r\n      padding: '10px',\r\n      border: '1px solid #ccc',\r\n      textAlign: 'center',\r\n    },\r\n    winnerCell: {\r\n      fontWeight: 'bold',\r\n    },\r\n    crownIcon: {\r\n      display: 'inline-block',\r\n      width: '12px',\r\n      height: '12px',\r\n      marginRight: '5px',\r\n      backgroundImage: 'url(crown-icon.png)',\r\n      backgroundSize: 'cover',\r\n      verticalAlign: 'middle',\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.testResults}>\r\n      <h2 className={classes.heading}>AB Test Results</h2>\r\n      <p>\r\n        Experiment Name: {variants.length > 0 ? variants[0] : ''}\r\n      </p>\r\n      <p>Date Created: {dateCreated}</p>\r\n      <Table className={classes.table}>\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell className={classes.tableHeaderCell}>Variants</TableCell>\r\n            <TableCell className={classes.tableHeaderCell}>Impressions</TableCell>\r\n            <TableCell className={classes.tableHeaderCell}>Click Through Rate</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {variants.map((variant: string, index: number) => (\r\n            <TableRow key={index}>\r\n              <TableCell className={classes.tableCell}>{variant}</TableCell>\r\n              <TableCell className={classes.tableCell}>{metrics[variant]?.views}</TableCell>\r\n              <TableCell className={classes.tableCell}>\r\n                {metrics[variant]?.clickThroughRate.toFixed(2)}\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n      <p>Status: {status}</p>\r\n      <p>\r\n        Confidence Interval: {confidenceInterval.toFixed(2)}%\r\n      </p>\r\n      {winner && (\r\n        <p>\r\n          Winner: <span className={classes.crownIcon}></span> {winner}\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TestResults;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}