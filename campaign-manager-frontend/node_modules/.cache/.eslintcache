[{"/home/zaneles/ABWinfuture/campaign-manager-frontend/src/index.tsx":"1","/home/zaneles/ABWinfuture/campaign-manager-frontend/src/reportWebVitals.ts":"2","/home/zaneles/ABWinfuture/campaign-manager-frontend/src/App.tsx":"3","/home/zaneles/ABWinfuture/campaign-manager-frontend/src/components/CreateTest/CreateTest.tsx":"4","/home/zaneles/ABWinfuture/campaign-manager-frontend/src/components/CampaignResults/CapaignResults.tsx":"5","/home/zaneles/ABWinfuture/campaign-manager-frontend/src/services/api.ts":"6"},{"size":554,"mtime":1687797095679,"results":"7","hashOfConfig":"8"},{"size":425,"mtime":1687797095679,"results":"9","hashOfConfig":"8"},{"size":1390,"mtime":1687797095679,"results":"10","hashOfConfig":"8"},{"size":6981,"mtime":1687797095679,"results":"11","hashOfConfig":"8"},{"size":5376,"mtime":1687797095679,"results":"12","hashOfConfig":"8"},{"size":3503,"mtime":1687797466876,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"q6alw9",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/zaneles/ABWinfuture/campaign-manager-frontend/src/index.tsx",[],[],"/home/zaneles/ABWinfuture/campaign-manager-frontend/src/reportWebVitals.ts",[],[],"/home/zaneles/ABWinfuture/campaign-manager-frontend/src/App.tsx",[],[],"/home/zaneles/ABWinfuture/campaign-manager-frontend/src/components/CreateTest/CreateTest.tsx",["33","34"],[],"import React, { useState, useEffect } from 'react';\nimport ABTestService from '../../services/api';\nimport { styled } from '@mui/material/styles';\nimport { Button, TextField, Container, Box, Typography } from \"@mui/material\";\nimport { Add, Delete } from '@mui/icons-material';\n\nconst FormContainer = styled('form')({\n  '& .MuiTextField-root': {\n    margin: '8px',\n    width: '25ch',\n  },\n});\n\nconst VariantName = styled(Typography)({\n  fontSize: '0.875rem',\n  color: 'rgba(0, 0, 0, 0.54)', // color similar to TextField label\n  marginBottom: '8px', // space between name and identifier\n});\n\nconst LineInput = styled(TextField)({\n  '& .MuiOutlinedInput-root': {\n    '& fieldset': {\n      border: 'none',\n      borderBottom: '1px solid rgba(0, 0, 0, 0.42)', // You can adjust color and thickness as you need\n    },\n    '&:hover fieldset': {\n      border: 'none',\n      borderBottom: '1px solid rgba(0, 0, 0, 0.42)',\n    },\n    '&.Mui-focused fieldset': {\n      border: 'none',\n      borderBottom: '2px solid #3f51b5', // Typically a focused input might have a slightly thicker and/or different colored border\n    },\n  },\n});\n\nconst CreateTest: React.FC<{ setCurrentTab: (tab: string) => void }> = (props) => {\n  const { setCurrentTab } = props;\n  const [campaignData, setCampaignData] = useState({\n    campaign_name : '', \n    contro_name: 'Original',\n    control_identifier: '',\n    type: '', // initially empty\n    variants: [\n      {\n        name: 'Variant A',\n        identifier: '',\n      } \n    ]\n  });\n\n  const [variantCount, setVariantCount] = useState(1);\n\n  useEffect(() => {\n    setCampaignData(prevData => ({\n      ...prevData,\n      variants: prevData.variants.map((variant, i) => ({\n        ...variant,\n        name: prevData.type ? `${campaignData.type.charAt(0).toUpperCase() + campaignData.type.slice(1)} ${String.fromCharCode(65 + i)}` : `Alternative Element ${String.fromCharCode(65 + i)}`\n      }))\n    }));\n  }, [variantCount, campaignData.type])\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n    setCampaignData((prevData) => ({\n      ...prevData,\n      [name]: value,\n    }));\n  };\n\n  const handleRemoveVariant = (indexToRemove: number) => {\n    setCampaignData((prevData) => ({\n      ...prevData,\n      variants: prevData.variants.filter((_, index) => index !== indexToRemove),\n    }));\n    setVariantCount(variantCount - 1);\n  };\n\n  const handleVariantChange = (event: React.ChangeEvent<HTMLInputElement>, index: number) => {\n    const { name, value } = event.target;\n    const updatedVariants = [...campaignData.variants];\n    updatedVariants[index] = {\n      ...updatedVariants[index],\n      [name]: value\n    };\n    setCampaignData((prevData) => ({\n      ...prevData,\n      variants: updatedVariants\n    }));\n  };\n\n  const handleAddVariant = () => {\n    const newVariant = {\n      name: campaignData.type ? `${campaignData.type.charAt(0).toUpperCase() + campaignData.type.slice(1)} ${String.fromCharCode(65 + variantCount)}` : `Alternative Element ${String.fromCharCode(65 + variantCount)}`,\n      identifier: '',\n    };\n    setCampaignData((prevData) => ({\n      ...prevData,\n      variants: [...prevData.variants, newVariant]\n    }));\n    setVariantCount(variantCount + 1);\n  };\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    try {\n      const elementExists = await ABTestService.checkElementExistence(campaignData.control_identifier, campaignData.type);\n      if(!elementExists) {\n        throw new Error('Element does not exist on the website');\n      }\n      const updatedCampaignData = {\n        ...campaignData,\n        control_name: 'Original',\n        variants: campaignData.variants.map((variant, index) => ({\n          ...variant,\n          name: `Variant ${String.fromCharCode(65 + index)}`,\n        })),\n      };\n  \n      await ABTestService.createCampaign(updatedCampaignData);\n      props.setCurrentTab('success');\n    } catch (error) {\n      props.setCurrentTab('error');\n    }\n  };\n\n  return (\n    <Container maxWidth=\"sm\">\n      <FormContainer noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n        <Box mb={3}>\n          <Typography variant=\"h6\" component=\"h2\">\n            Set Up A New Campaign\n          </Typography>\n  \n          <LineInput\n            id=\"campaign_name\"\n            label=\"Campaign Name\"\n            name=\"campaign_name\"\n            value={campaignData.campaign_name}\n            onChange={handleInputChange}\n            variant=\"outlined\"\n            fullWidth\n          />\n  <LineInput\n  id=\"type\"\n  select\n  label=\"Campaign Type\"\n  name=\"type\"\n  value={campaignData.type}\n  onChange={handleInputChange}\n  SelectProps={{ native: true }}\n  variant=\"outlined\"\n  fullWidth\n  InputLabelProps={{ shrink: true }}\n>\n  <option value=\"\">Select</option>\n  <option value=\"headline\">Headline</option>\n  <option value=\"image\">Image Src</option>\n  <option value=\"custom\">Custom</option>\n</LineInput>\n\n  \n          <LineInput\n            id=\"control_identifier\"\n            label={campaignData.type === 'headline' ? \"Original Headline\" : campaignData.type === 'image' ? \"Original Image Src\" : campaignData.type === 'custom' ? \"Original Custom\" : \"Orignal Element\"}\n            name=\"control_identifier\"\n            value={campaignData.control_identifier}\n            onChange={handleInputChange}\n            variant=\"outlined\"\n            fullWidth\n            required\n          />\n  \n          <Typography variant=\"h6\" component=\"h2\" sx={{ mt: 2 }}>\n          {campaignData.type === 'headline' ? \"Add Headlines\" : campaignData.type === 'image' ? \"Add Image Sources\" : campaignData.type === 'custom' ? \"Add Custom Element\" : \"\"}          </Typography>\n  \n          {campaignData.variants.map((variant, variantIndex) => (\n  <Box key={variantIndex} mb={3}>\n    <VariantName variant=\"body1\">\n      {variant.name}\n    </VariantName>\n\n    <LineInput\n      id={`variant-identifier-${variantIndex}`}\n      label={campaignData.type === 'headline' ? \"Alternative Headline\" : campaignData.type === 'image' ? \"Alternative Image Src\" : \"Alternative element\"}\n      name=\"identifier\"\n      value={variant.identifier}\n      onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n        handleVariantChange(event, variantIndex)\n      }\n      variant=\"outlined\"\n      fullWidth\n      required\n    />\n            \n  \n            <Delete\n  style={{ color: 'red', cursor: 'pointer', marginTop: '16px' }}\n  onClick={() => handleRemoveVariant(variantIndex)}\n/>\n\n            </Box>\n          ))}\n  \n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            onClick={handleAddVariant}\n            sx={{ mt: 2 }}\n          >\n            Add Variant\n          </Button>\n        </Box>\n  \n        <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n          Create Test\n        </Button>\n      </FormContainer>\n    </Container>\n  );\n};\n\nexport default CreateTest;\n","/home/zaneles/ABWinfuture/campaign-manager-frontend/src/components/CampaignResults/CapaignResults.tsx",[],[],"/home/zaneles/ABWinfuture/campaign-manager-frontend/src/services/api.ts",[],[],{"ruleId":"35","severity":1,"message":"36","line":5,"column":10,"nodeType":"37","messageId":"38","endLine":5,"endColumn":13},{"ruleId":"35","severity":1,"message":"39","line":38,"column":11,"nodeType":"37","messageId":"38","endLine":38,"endColumn":24},"@typescript-eslint/no-unused-vars","'Add' is defined but never used.","Identifier","unusedVar","'setCurrentTab' is assigned a value but never used."]